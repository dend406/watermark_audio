import scipy.io.wavfile #for sound file
import pydub #for sound file
import numpy as np
import matplotlib.pyplot as plt
import pywt
from scipy.signal import find_peaks


#music folder
temp_folder="C:\\Users\\Denis\\Desktop\\pythonProject\\"
#test mp3 file
mp3_file="mp3.mp3"

#read mp3 file
mp3 = pydub.AudioSegment.from_mp3(temp_folder+mp3_file)
#convert to wav
mp3.export(temp_folder+"testfile.wav", format="wav")
#read wav file
rate,audData=scipy.io.wavfile.read(temp_folder+"testfile.wav")

print("The sampling rate - "+str(rate))
print("The total number of data - "+str(audData.shape[0]))
print("The number of channels (i.e. is it mono or stereo) is - "+str(audData.shape[1]))
print("The wav length is "+str(audData.shape[0] / rate)+" seconds")

#wav number of channels
channel1=audData[:,0] #left
channel2=audData[:,1] #right

#create a time variable in seconds
time = np.arange(0, float(audData.shape[0]), 1)/rate

#find peaks with distance
peaks = find_peaks(channel1, distance = 10000)
peaks_massive = peaks[0]
print(len(peaks_massive))
print(peaks_massive)

#len array dwt
len_array = 1000

#create dict for name mass
dic_mass = {}

#cycle for mass
for i in range(0, len(peaks_massive)):
    dic_mass["mass" + str(i)] = channel1[peaks_massive[i]:peaks_massive[i] + len_array]

print(dic_mass["mass0"])


#for i in range(0, len(peaks_massive)):
#    listmass_list[0] = channel1[peaks_massive[i]:peaks_massive[i] + len_array]
#dwt_massive0 = channel1[peaks_massive[0]:peaks_massive[0]+len_array]

#print(mass0)

#print(dwt_massive)

cA1, cD1 = pywt.dwt(dic_mass["mass0"], 'db1')
cA2, cD2 = pywt.dwt(cA1, 'db1')
cA3, cD3 = pywt.dwt(cA2, 'db1')
cA4, cD4 = pywt.dwt(cA3, 'db1')
cA5, cD5 = pywt.dwt(cA4, 'db1')
cA6, cD6 = pywt.dwt(cA5, 'db1')
#cA7, cD7 = pywt.dwt(cA6, 'db1')
#cA8, cD8 = pywt.dwt(cA7, 'db1')
#cA9, cD9= pywt.dwt(cA8, 'db1')
#cA10, cD10= pywt.dwt(cA9, 'db1')

print(cA6)
print(cD6)

#massive of watemark
watermark = np.linspace(5, 5, num=len(cD6))
#print(watermark)

#add watermark and cD6
cD6 = cD6+watermark
#print(cD6)










'''
time_compress = time[::256]
print(time_compress.shape)

plt.figure(1)
plt.subplot(211)
plt.plot(time_compress, cA8, linewidth=0.5, alpha=1, color='#ff7f00')
plt.xlabel('Час (с)')
plt.ylabel('Амплітуда')
plt.subplot(212)
plt.plot(time, channel1, linewidth=0.5, alpha=1, color='#ff7f00')
plt.xlabel('Час (с)')
plt.ylabel('Амплітуда')
plt.show()
'''
